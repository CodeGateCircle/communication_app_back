openapi: "3.0.0"

info:
  version: 1.0.0
  title: communication_app
  description: "communication_appのOpenAPI"

tags:
  - name: users
    description: about users
  - name: workspaces
    description: about workspaces
  - name: categories
    description: about categories
  - name: rooms
    description: about rooms
  - name: reactions
    description: about reactions
  - name: messages
    description: about messages

servers:
  - url: ---
    description: production API
  - url: http://{host}:{port}/api/v0
    description: development
    variables:
      host:
        default: localhost
      port:
        default: "3000"

paths:
  /profile:
    get:
      tags:
        - users
      operationId: get_user
      summary: Get user data.
      description: Get user data.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    users:
                      type: object
                      properties:
                        id:
                          $ref: "#/components/schemas/userId"
                        name:
                          $ref: "#/components/schemas/userName"
                        email:
                          $ref: "#/components/schemas/userEmail"
                        userImageUrl:
                          $ref: "#/components/schemas/userImageUrl"
                    workspaces:
                      description: explain
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            $ref: "#/components/schemas/workspaceId"
                          name:
                            $ref: "#/components/schemas/workspaceName"
                          description:
                            $ref: "#/components/schemas/workspaceDescription"
                          iconImageUrl:
                            $ref: "#/components/schemas/iconImageUrl"
                          coverImageUrl:
                            $ref: "#/components/schemas/coverImageUrl"

    put:
      tags:
        - users
      operationId: update_user
      summary: Update the user.
      description: Update the user.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/userName"
                image:
                  $ref: "#/components/schemas/userImageUrl"

    post:
      tags:
        - users
      operationId: delete_profile
      summary: Delete profile.
      description: Delete profile
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }
  # create
  /workspaces:
    post:
      tags:
        - workspaces
      operationId: create_workspace
      summary: Create new workspace.
      description: Create new workspace.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workspaceData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/workspaceName"
                description:
                  $ref: "#/components/schemas/workspaceDescription"
                iconImageUrl:
                  $ref: "#/components/schemas/iconImageUrl"
                coverImageUrl:
                  $ref: "#/components/schemas/coverImageUrl"
  # update
  /workspaces/{workspace_id}:
    put:
      tags:
        - workspaces
      operationId: update_workspace
      summary: Update the workspace.
      description: Update the workspace
      parameters:
        - name: workspace_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workspaceId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workspaceData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/workspaceName"
                description:
                  $ref: "#/components/schemas/workspaceDescription"
                iconImageUrl:
                  $ref: "#/components/schemas/iconImageUrl"
                coverImageUrl:
                  $ref: "#/components/schemas/coverImageUrl"
  # delete
  /workspaces/{workspace_id}/delete:
    post:
      tags:
        - workspaces
      operationId: delete_workspace
      summary: Delete the workspace
      description: Delete the workspace
      parameters:
        - name: workspace_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/workspaceId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }

  /workspaces/invite:
    post:
      tags:
        - workspaces
      operationId: invite_ppl_to_workspace
      summary: Invite people to workspace.
      description: Invite people to workspace.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workspace_id:
                  $ref: "#/components/schemas/workspaceId"
                email:
                  $ref: "#/components/schemas/userEmail"

  # create
  /categories:
    post:
      tags:
        - categories
      operationId: create_category
      summary: Create new category.
      description: Create new category.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categoryData"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/categoryName"
                workspaceId:
                  $ref: "#/components/schemas/workspaceId"

    get:
      tags:
        - categories
      operationId: get_categories
      summary: Get categories.
      description: Get categories.
      parameters:
        - name: workspace_id
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/workspaceId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      description: カテゴリー一覧
                      properties:
                        id:
                          $ref: "#/components/schemas/categoryId"
                        name:
                          $ref: "#/components/schemas/categoryName"
                        workspaceId:
                          $ref: "#/components/schemas/workspaceId"
  # update
  /categories/{category_id}:
    put:
      tags:
        - categories
      operationId: update_category
      summary: Update the category
      description: Update the category
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categoryData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/categoryName"
                workspaceId:
                  $ref: "#/components/schemas/workspaceId"
  # delete
  /categories/{category_id}/delete:
    post:
      tags:
        - categories
      operationId: delete_category
      summary: Delete the category
      description: Delete the category
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }

  # create
  /rooms:
    post:
      tags:
        - rooms
      operationId: create_room
      summary: Create new room.
      description: Create new room.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/roomName"
                description:
                  $ref: "#/components/schemas/roomDescription"
                categoryId:
                  $ref: "#/components/schemas/categoryId"
                workspaceId:
                  $ref: "#/components/schemas/workspaceId"
  # index
  /rooms/{workspace_id}:
    get:
      tags:
        - rooms
      operationId: index_room
      summary: Index your rooms.
      description: Index your rooms.
      parameters:
        - name: workspace_id
          in: query
          description: "workspace_id"
          required: true
          schema:
            $ref: "#/components/schemas/workspaceId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: "#/components/schemas/categoryId"
                        name:
                          $ref: "#/components/schemas/categoryName"
                        rooms:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                $ref: "#/components/schemas/roomId"
                              name:
                                $ref: "#/components/schemas/roomName"
        400:
          description: Error operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      text:
                        description: error message
                        example: あなたはこのワークスペースに属していません
                        type: string
  # delete
  /rooms/{room_id}/delete:
    post:
      tags:
        - rooms
      operationId: delete_room
      summary: Delete the room
      description: Delete the room
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/roomId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }
        400:
          description: Error operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      text:
                        description: error message
                        example: あなたはこのルームに属していません
                        type: string
  # update
  /rooms/{room_id}:
    put:
      tags:
        - rooms
      operationId: update_room
      summary: Update the room
      description: Update the room
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/roomId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomData"
        400:
          description: Error operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      text:
                        description: error message
                        example: あなたはこのルームに属していません
                        type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/roomName"
                description:
                  $ref: "#/components/schemas/roomDescription"
                categoryId:
                  $ref: "#/components/schemas/categoryId"
  # invite
  /rooms/{room_id}/invite:
    post:
      tags:
        - rooms
      operationId: invite_room
      summary: Invite the room
      description: Invite the room
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            $ref: "#components/schema/roomId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }
        400:
          description: Error operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      text:
                        description: error message
                        example: あなたはこのルームに属していません
                        type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/userId"
  # remove
  /rooms/{room_id}/remove:
    post:
      tags:
        - rooms
      operationId: remove_room_user
      summary: remove_room_user
      description: Remove_room_user
      parameters:
        - name: room_id
          in: path
          required: true
          schema:
            $ref: "#components/schemas/roomId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }
        400:
          description: Error operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      text:
                        description: error message
                        example: あなたはこのルームに属していません
                        type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: array
                  items:
                    $ref: "#/components/schemas/userId"
  # index
  /messages:
    get:
      tags:
        - messages
      operationId: index_room
      summary: Index your rooms.
      description: Index your rooms.
      parameters:
        - name: room_id
          in: query
          description: "room_id"
          required: true
          schema:
            $ref: "#/components/schemas/roomId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/messageId"
                    text:
                      $ref: "#/components/schemas/messageText"
                    userId:
                      $ref: "#/components/schemas/userId"
                    roomId:
                      $ref: "#/components/schemas/roomId"

  /reactions:
    # create
    post:
      tags:
        - reactions
      operationId: create_reactions
      summary: Create the reactions
      description: Create the reactions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reactionData"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  $ref: "#/components/schemas/messageId"
                name:
                  $ref: "#/components/schemas/reactionName"

    # index
    get:
      tags:
        - reactions
      operationId: index_reactions
      summary: Index the reactions
      description: Index the reactions
      parameters:
        - name: message_id
          in: query
          description: "message_id"
          required: true
          schema:
            $ref: "#/components/schemas/messageId"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  reactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/reactionData"
                      
  /reactions/delete:
    # delete
    post:
      tags:
        - reactions
      operationId: delete_reactions
      summary: Delete the reactions
      description: Delete the reactions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                example: { success: true }

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  $ref: "#/components/schemas/messageId"
                name:
                  $ref: "#/components/schemas/reactionName"


components:
  schemas:
    userData:
      description: explain
      type: object
      required:
        - user
      properties:
        user:
          description: explain
          type: object
          required:
            - id
            - name
            - email
            - iconImageUrl
          properties:
            id:
              $ref: "#/components/schemas/userId"
            name:
              $ref: "#/components/schemas/userName"
            email:
              $ref: "#/components/schemas/userEmail"
            userImageUrl:
              $ref: "#/components/schemas/userImageUrl"

    workspaceData:
      description: explain
      type: object
      required:
        - workspace
      properties:
        workspace:
          description: explain
          type: object
          required:
            - id
            - name
            - description
            - iconImageUrl
            - coverImageUrl
          properties:
            id:
              $ref: "#/components/schemas/workspaceId"
            name:
              $ref: "#/components/schemas/workspaceName"
            description:
              $ref: "#/components/schemas/workspaceDescription"
            iconImageUrl:
              $ref: "#/components/schemas/iconImageUrl"
            coverImageUrl:
              $ref: "#/components/schemas/coverImageUrl"

    categoryData:
      description: explain
      type: object
      required:
        - id
        - name
        - workspaceId
      properties:
        category:
          description: explain
          type: object
          required:
            - id
            - name
            - workspaceId
          properties:
            id:
              $ref: "#/components/schemas/categoryId"
            name:
              $ref: "#/components/schemas/categoryName"
            workspaceId:
              $ref: "#/components/schemas/workspaceId"

    roomData:
      description: explain
      type: object
      required:
        - room
      properties:
        room:
          description: explain
          type: object
          required:
            - id
            - name
            - description
            - categoryId
            - workspaceId
          properties:
            id:
              $ref: "#/components/schemas/roomId"
            name:
              $ref: "#/components/schemas/roomName"
            description:
              $ref: "#/components/schemas/roomDescription"
            categoryId:
              $ref: "#/components/schemas/categoryId"
            workspaceId:
              $ref: "#/components/schemas/workspaceId"
    message_data:
      description: message
      type: object
      required:
        - message
      properties:
        message:
          description: message
          type: object
          required:
            - id
            - text
            - userId
            - roomId
          properties:
            id:
              $ref: "#/components/schemas/messageId"
            text:
              $ref: "#/components/schemas/messageText"
            userId:
              $ref: "#/components/schemas/userId"
            roomId:
              $ref: "#/components/schemas/roomId"

    reactionData:
      description: explain
      type: object
      required:
        - messageId
        - name
        - userId
      properties:
        messageId:
          $ref: "#/components/schemas/messageId"
        name:
          $ref: "#/components/schemas/reactionName"
        userId:
          $ref: "#/components/schemas/userId"

    userId:
      description: user unique id
      example: 1
      type: integer

    userName:
      description: name of user
      example: Tony
      type: string

    userEmail:
      description: email of user
      example: user@example.com
      type: string

    userImageUrl:
      description: image url of user
      example: https://example.com/user_icon
      type: string

    workspaceId:
      description: workspace unique id
      example: 111
      type: integer

    workspaceName:
      description: name of workspace
      example: Code.Gate?
      type: string

    workspaceDescription:
      description: description of workspace
      example: Code.Gate?の説明
      type: string

    iconImageUrl:
      description: iconImageUrl
      example: http://icon_image_url
      type: string

    coverImageUrl:
      description: coverImageUrl
      example: http://cover_image_url
      type: string

    roomId:
      description: room unique id
      example: 222
      type: integer

    roomName:
      description: name of room
      example: 雑談
      type: string

    roomDescription:
      description: room of workspace
      example: 雑談の説明
      type: string

    categoryId:
      description: category unique id
      example: 2
      type: integer

    categoryName:
      description: name of category
      example: general
      type: string

    messageId:
      description: message unique id
      example: 1
      type: integer

    messageText:
      description: message text
      example: hello
      type: string

    reactionName:
      description: name of reaction
      example: 祈り
      type: string
